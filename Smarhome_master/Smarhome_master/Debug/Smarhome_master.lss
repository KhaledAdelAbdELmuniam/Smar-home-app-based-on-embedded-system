
Smarhome_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000083a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c8  00800060  0000083a  000008ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000976  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001be8  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b2f  00000000  00000000  000026fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b64  00000000  00000000  0000322b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001cc  00000000  00000000  00003d90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000766  00000000  00000000  00003f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e70  00000000  00000000  000046c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00005532  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 32       	cpi	r26, 0x28	; 40
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a2 02 	call	0x544	; 0x544 <main>
  7a:	0c 94 1b 04 	jmp	0x836	; 0x836 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_init>:
 * Created: 29-Oct-20 6:31:13 PM
 *  Author: Khaled
 */ 
#include "ADC.h"
void ADC_init(void){
	ADMUX= (1<<REFS1)|(1<<REFS0); //INTERNAL REF VOLTAGE
  82:	80 ec       	ldi	r24, 0xC0	; 192
  84:	87 b9       	out	0x07, r24	; 7
	ADCSRA= (1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(ADPS2); //ENABLE ADC AND 128 PRESCALE
  86:	83 e8       	ldi	r24, 0x83	; 131
  88:	86 b9       	out	0x06, r24	; 6
  8a:	08 95       	ret

0000008c <DIO_write>:
#include "DIO.h"

void DIO_write(DIO_Channel_types channelID, STD_leveltypes level){
	
DIO_PORT_types PORTX= channelID/8;
DIO_Channel_types BIT_NUMBER=channelID%8;
  8c:	98 2f       	mov	r25, r24
  8e:	97 70       	andi	r25, 0x07	; 7
switch (PORTX){
  90:	86 95       	lsr	r24
  92:	86 95       	lsr	r24
  94:	86 95       	lsr	r24
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	21 f1       	breq	.+72     	; 0xe2 <DIO_write+0x56>
  9a:	30 f0       	brcs	.+12     	; 0xa8 <DIO_write+0x1c>
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	f1 f1       	breq	.+124    	; 0x11c <DIO_write+0x90>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	09 f4       	brne	.+2      	; 0xa6 <DIO_write+0x1a>
  a4:	58 c0       	rjmp	.+176    	; 0x156 <DIO_write+0xca>
  a6:	08 95       	ret
	case DIO_portA:
	   if (level == std_high){
  a8:	61 30       	cpi	r22, 0x01	; 1
  aa:	69 f4       	brne	.+26     	; 0xc6 <DIO_write+0x3a>
		   set_bit(PORTA_Reg,BIT_NUMBER);
  ac:	4b b3       	in	r20, 0x1b	; 27
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	b9 01       	movw	r22, r18
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_write+0x2e>
  b6:	66 0f       	add	r22, r22
  b8:	77 1f       	adc	r23, r23
  ba:	9a 95       	dec	r25
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_write+0x2a>
  be:	cb 01       	movw	r24, r22
  c0:	84 2b       	or	r24, r20
  c2:	8b bb       	out	0x1b, r24	; 27
  c4:	08 95       	ret
	   }
	   else {clear_bit(PORTA_Reg,BIT_NUMBER);}
  c6:	4b b3       	in	r20, 0x1b	; 27
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	b9 01       	movw	r22, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_write+0x48>
  d0:	66 0f       	add	r22, r22
  d2:	77 1f       	adc	r23, r23
  d4:	9a 95       	dec	r25
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_write+0x44>
  d8:	cb 01       	movw	r24, r22
  da:	80 95       	com	r24
  dc:	84 23       	and	r24, r20
  de:	8b bb       	out	0x1b, r24	; 27
  e0:	08 95       	ret
		   break;
		   
		   case DIO_portB:
		   if (level == std_high){
  e2:	61 30       	cpi	r22, 0x01	; 1
  e4:	69 f4       	brne	.+26     	; 0x100 <DIO_write+0x74>
			   set_bit(PORTB_Reg,BIT_NUMBER);
  e6:	48 b3       	in	r20, 0x18	; 24
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	b9 01       	movw	r22, r18
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_write+0x68>
  f0:	66 0f       	add	r22, r22
  f2:	77 1f       	adc	r23, r23
  f4:	9a 95       	dec	r25
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_write+0x64>
  f8:	cb 01       	movw	r24, r22
  fa:	84 2b       	or	r24, r20
  fc:	88 bb       	out	0x18, r24	; 24
  fe:	08 95       	ret
		   }
		   else {clear_bit(PORTB_Reg,BIT_NUMBER);}
 100:	48 b3       	in	r20, 0x18	; 24
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	b9 01       	movw	r22, r18
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_write+0x82>
 10a:	66 0f       	add	r22, r22
 10c:	77 1f       	adc	r23, r23
 10e:	9a 95       	dec	r25
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_write+0x7e>
 112:	cb 01       	movw	r24, r22
 114:	80 95       	com	r24
 116:	84 23       	and	r24, r20
 118:	88 bb       	out	0x18, r24	; 24
 11a:	08 95       	ret
		   break;
		   
		   case DIO_portC:
		   if (level == std_high){
 11c:	61 30       	cpi	r22, 0x01	; 1
 11e:	69 f4       	brne	.+26     	; 0x13a <DIO_write+0xae>
			   set_bit(PORTC_Reg,BIT_NUMBER);
 120:	45 b3       	in	r20, 0x15	; 21
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	b9 01       	movw	r22, r18
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_write+0xa2>
 12a:	66 0f       	add	r22, r22
 12c:	77 1f       	adc	r23, r23
 12e:	9a 95       	dec	r25
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_write+0x9e>
 132:	cb 01       	movw	r24, r22
 134:	84 2b       	or	r24, r20
 136:	85 bb       	out	0x15, r24	; 21
 138:	08 95       	ret
		   }
		   else {clear_bit(PORTC_Reg,BIT_NUMBER);}
 13a:	45 b3       	in	r20, 0x15	; 21
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	b9 01       	movw	r22, r18
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_write+0xbc>
 144:	66 0f       	add	r22, r22
 146:	77 1f       	adc	r23, r23
 148:	9a 95       	dec	r25
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_write+0xb8>
 14c:	cb 01       	movw	r24, r22
 14e:	80 95       	com	r24
 150:	84 23       	and	r24, r20
 152:	85 bb       	out	0x15, r24	; 21
 154:	08 95       	ret
		   break;
		   case DIO_portD:
		   if (level == std_high){
 156:	61 30       	cpi	r22, 0x01	; 1
 158:	69 f4       	brne	.+26     	; 0x174 <DIO_write+0xe8>
			   set_bit(PORTD_Reg,BIT_NUMBER);
 15a:	42 b3       	in	r20, 0x12	; 18
 15c:	21 e0       	ldi	r18, 0x01	; 1
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	b9 01       	movw	r22, r18
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_write+0xdc>
 164:	66 0f       	add	r22, r22
 166:	77 1f       	adc	r23, r23
 168:	9a 95       	dec	r25
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_write+0xd8>
 16c:	cb 01       	movw	r24, r22
 16e:	84 2b       	or	r24, r20
 170:	82 bb       	out	0x12, r24	; 18
 172:	08 95       	ret
		   }
		   else {clear_bit(PORTD_Reg,BIT_NUMBER);}
 174:	42 b3       	in	r20, 0x12	; 18
 176:	21 e0       	ldi	r18, 0x01	; 1
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	b9 01       	movw	r22, r18
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_write+0xf6>
 17e:	66 0f       	add	r22, r22
 180:	77 1f       	adc	r23, r23
 182:	9a 95       	dec	r25
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_write+0xf2>
 186:	cb 01       	movw	r24, r22
 188:	80 95       	com	r24
 18a:	84 23       	and	r24, r20
 18c:	82 bb       	out	0x12, r24	; 18
 18e:	08 95       	ret

00000190 <DIO_Init>:
	{OUTPUT,std_low},
	{OUTPUT,std_low}
};


void DIO_Init(){
 190:	e0 e6       	ldi	r30, 0x60	; 96
 192:	f0 e0       	ldi	r31, 0x00	; 0
	DIO_PORT_types PORTx;
	uint8 BitNo, count;
	
	//DDR_Reg initialization
	for(count=DIO_channelA0; count<PIN_Num;count++){
 194:	80 e0       	ldi	r24, 0x00	; 0
			case DIO_portB:
			if (ChannelsInit[count].ChannelDir == OUTPUT){
				set_bit(DDRB_Reg,BitNo);
			}
			else{
				clear_bit(DDRB_Reg,BitNo);
 196:	41 e0       	ldi	r20, 0x01	; 1
 198:	50 e0       	ldi	r21, 0x00	; 0
	uint8 BitNo, count;
	
	//DDR_Reg initialization
	for(count=DIO_channelA0; count<PIN_Num;count++){
		PORTx=count/8;
		BitNo=count%8;
 19a:	28 2f       	mov	r18, r24
 19c:	27 70       	andi	r18, 0x07	; 7
		
		switch (PORTx){
 19e:	98 2f       	mov	r25, r24
 1a0:	96 95       	lsr	r25
 1a2:	96 95       	lsr	r25
 1a4:	96 95       	lsr	r25
 1a6:	91 30       	cpi	r25, 0x01	; 1
 1a8:	09 f1       	breq	.+66     	; 0x1ec <DIO_Init+0x5c>
 1aa:	30 f0       	brcs	.+12     	; 0x1b8 <DIO_Init+0x28>
 1ac:	92 30       	cpi	r25, 0x02	; 2
 1ae:	c1 f1       	breq	.+112    	; 0x220 <DIO_Init+0x90>
 1b0:	93 30       	cpi	r25, 0x03	; 3
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <DIO_Init+0x26>
 1b4:	4f c0       	rjmp	.+158    	; 0x254 <DIO_Init+0xc4>
 1b6:	67 c0       	rjmp	.+206    	; 0x286 <DIO_Init+0xf6>
			case DIO_portA:
			if (ChannelsInit[count].ChannelDir == OUTPUT){
 1b8:	90 81       	ld	r25, Z
 1ba:	91 30       	cpi	r25, 0x01	; 1
 1bc:	59 f4       	brne	.+22     	; 0x1d4 <DIO_Init+0x44>
				set_bit(DDRA_Reg,BitNo);
 1be:	9a b3       	in	r25, 0x1a	; 26
 1c0:	ba 01       	movw	r22, r20
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_Init+0x38>
 1c4:	66 0f       	add	r22, r22
 1c6:	77 1f       	adc	r23, r23
 1c8:	2a 95       	dec	r18
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_Init+0x34>
 1cc:	9b 01       	movw	r18, r22
 1ce:	29 2b       	or	r18, r25
 1d0:	2a bb       	out	0x1a, r18	; 26
 1d2:	59 c0       	rjmp	.+178    	; 0x286 <DIO_Init+0xf6>
			}
			else{
				clear_bit(DDRA_Reg,BitNo);
 1d4:	3a b3       	in	r19, 0x1a	; 26
 1d6:	ba 01       	movw	r22, r20
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <DIO_Init+0x4e>
 1da:	66 0f       	add	r22, r22
 1dc:	77 1f       	adc	r23, r23
 1de:	2a 95       	dec	r18
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <DIO_Init+0x4a>
 1e2:	96 2f       	mov	r25, r22
 1e4:	90 95       	com	r25
 1e6:	93 23       	and	r25, r19
 1e8:	9a bb       	out	0x1a, r25	; 26
 1ea:	4d c0       	rjmp	.+154    	; 0x286 <DIO_Init+0xf6>
			}
			break;
			
			case DIO_portB:
			if (ChannelsInit[count].ChannelDir == OUTPUT){
 1ec:	90 81       	ld	r25, Z
 1ee:	91 30       	cpi	r25, 0x01	; 1
 1f0:	59 f4       	brne	.+22     	; 0x208 <DIO_Init+0x78>
				set_bit(DDRB_Reg,BitNo);
 1f2:	97 b3       	in	r25, 0x17	; 23
 1f4:	ba 01       	movw	r22, r20
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_Init+0x6c>
 1f8:	66 0f       	add	r22, r22
 1fa:	77 1f       	adc	r23, r23
 1fc:	2a 95       	dec	r18
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_Init+0x68>
 200:	9b 01       	movw	r18, r22
 202:	29 2b       	or	r18, r25
 204:	27 bb       	out	0x17, r18	; 23
 206:	3f c0       	rjmp	.+126    	; 0x286 <DIO_Init+0xf6>
			}
			else{
				clear_bit(DDRB_Reg,BitNo);
 208:	37 b3       	in	r19, 0x17	; 23
 20a:	ba 01       	movw	r22, r20
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_Init+0x82>
 20e:	66 0f       	add	r22, r22
 210:	77 1f       	adc	r23, r23
 212:	2a 95       	dec	r18
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_Init+0x7e>
 216:	96 2f       	mov	r25, r22
 218:	90 95       	com	r25
 21a:	93 23       	and	r25, r19
 21c:	97 bb       	out	0x17, r25	; 23
 21e:	33 c0       	rjmp	.+102    	; 0x286 <DIO_Init+0xf6>
			}
			break;
			
			case DIO_portC:
			if (ChannelsInit[count].ChannelDir == OUTPUT){
 220:	90 81       	ld	r25, Z
 222:	91 30       	cpi	r25, 0x01	; 1
 224:	59 f4       	brne	.+22     	; 0x23c <DIO_Init+0xac>
				set_bit(DDRC_Reg,BitNo);
 226:	94 b3       	in	r25, 0x14	; 20
 228:	ba 01       	movw	r22, r20
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_Init+0xa0>
 22c:	66 0f       	add	r22, r22
 22e:	77 1f       	adc	r23, r23
 230:	2a 95       	dec	r18
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_Init+0x9c>
 234:	9b 01       	movw	r18, r22
 236:	29 2b       	or	r18, r25
 238:	24 bb       	out	0x14, r18	; 20
 23a:	25 c0       	rjmp	.+74     	; 0x286 <DIO_Init+0xf6>
			}
			else{
				clear_bit(DDRC_Reg,BitNo);
 23c:	34 b3       	in	r19, 0x14	; 20
 23e:	ba 01       	movw	r22, r20
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_Init+0xb6>
 242:	66 0f       	add	r22, r22
 244:	77 1f       	adc	r23, r23
 246:	2a 95       	dec	r18
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_Init+0xb2>
 24a:	96 2f       	mov	r25, r22
 24c:	90 95       	com	r25
 24e:	93 23       	and	r25, r19
 250:	94 bb       	out	0x14, r25	; 20
 252:	19 c0       	rjmp	.+50     	; 0x286 <DIO_Init+0xf6>
			}
			break;
			
			case DIO_portD:
			if (ChannelsInit[count].ChannelDir == OUTPUT){
 254:	90 81       	ld	r25, Z
 256:	91 30       	cpi	r25, 0x01	; 1
 258:	59 f4       	brne	.+22     	; 0x270 <DIO_Init+0xe0>
				set_bit(DDRD_Reg,BitNo);
 25a:	91 b3       	in	r25, 0x11	; 17
 25c:	ba 01       	movw	r22, r20
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_Init+0xd4>
 260:	66 0f       	add	r22, r22
 262:	77 1f       	adc	r23, r23
 264:	2a 95       	dec	r18
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_Init+0xd0>
 268:	9b 01       	movw	r18, r22
 26a:	29 2b       	or	r18, r25
 26c:	21 bb       	out	0x11, r18	; 17
 26e:	0b c0       	rjmp	.+22     	; 0x286 <DIO_Init+0xf6>
			}
			else{
				clear_bit(DDRD_Reg,BitNo);
 270:	31 b3       	in	r19, 0x11	; 17
 272:	ba 01       	movw	r22, r20
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_Init+0xea>
 276:	66 0f       	add	r22, r22
 278:	77 1f       	adc	r23, r23
 27a:	2a 95       	dec	r18
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_Init+0xe6>
 27e:	96 2f       	mov	r25, r22
 280:	90 95       	com	r25
 282:	93 23       	and	r25, r19
 284:	91 bb       	out	0x11, r25	; 17
void DIO_Init(){
	DIO_PORT_types PORTx;
	uint8 BitNo, count;
	
	//DDR_Reg initialization
	for(count=DIO_channelA0; count<PIN_Num;count++){
 286:	8f 5f       	subi	r24, 0xFF	; 255
 288:	32 96       	adiw	r30, 0x02	; 2
 28a:	80 32       	cpi	r24, 0x20	; 32
 28c:	09 f0       	breq	.+2      	; 0x290 <DIO_Init+0x100>
 28e:	85 cf       	rjmp	.-246    	; 0x19a <DIO_Init+0xa>
 290:	e1 e6       	ldi	r30, 0x61	; 97
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 e0       	ldi	r24, 0x00	; 0
			case DIO_portB:
			if (ChannelsInit[count].ChannelLevel == std_high){
				set_bit(PORTB_Reg,BitNo);
			}
			else{
				clear_bit(PORTB_Reg,BitNo);
 296:	41 e0       	ldi	r20, 0x01	; 1
 298:	50 e0       	ldi	r21, 0x00	; 0
	}
	
	//PORT_Reg initialization
	for(count=DIO_channelA0; count<PIN_Num;count++){
		PORTx=count/8;
		BitNo=count%8;
 29a:	28 2f       	mov	r18, r24
 29c:	27 70       	andi	r18, 0x07	; 7
		
		switch (PORTx){
 29e:	98 2f       	mov	r25, r24
 2a0:	96 95       	lsr	r25
 2a2:	96 95       	lsr	r25
 2a4:	96 95       	lsr	r25
 2a6:	91 30       	cpi	r25, 0x01	; 1
 2a8:	09 f1       	breq	.+66     	; 0x2ec <DIO_Init+0x15c>
 2aa:	30 f0       	brcs	.+12     	; 0x2b8 <DIO_Init+0x128>
 2ac:	92 30       	cpi	r25, 0x02	; 2
 2ae:	c1 f1       	breq	.+112    	; 0x320 <DIO_Init+0x190>
 2b0:	93 30       	cpi	r25, 0x03	; 3
 2b2:	09 f4       	brne	.+2      	; 0x2b6 <DIO_Init+0x126>
 2b4:	4f c0       	rjmp	.+158    	; 0x354 <DIO_Init+0x1c4>
 2b6:	67 c0       	rjmp	.+206    	; 0x386 <DIO_Init+0x1f6>
			case DIO_portA:
			if (ChannelsInit[count].ChannelLevel == std_high){
 2b8:	90 81       	ld	r25, Z
 2ba:	91 30       	cpi	r25, 0x01	; 1
 2bc:	59 f4       	brne	.+22     	; 0x2d4 <DIO_Init+0x144>
				set_bit(PORTA_Reg,BitNo);
 2be:	9b b3       	in	r25, 0x1b	; 27
 2c0:	ba 01       	movw	r22, r20
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_Init+0x138>
 2c4:	66 0f       	add	r22, r22
 2c6:	77 1f       	adc	r23, r23
 2c8:	2a 95       	dec	r18
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_Init+0x134>
 2cc:	9b 01       	movw	r18, r22
 2ce:	29 2b       	or	r18, r25
 2d0:	2b bb       	out	0x1b, r18	; 27
 2d2:	59 c0       	rjmp	.+178    	; 0x386 <DIO_Init+0x1f6>
			}
			else{
				clear_bit(PORTA_Reg,BitNo);
 2d4:	3b b3       	in	r19, 0x1b	; 27
 2d6:	ba 01       	movw	r22, r20
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_Init+0x14e>
 2da:	66 0f       	add	r22, r22
 2dc:	77 1f       	adc	r23, r23
 2de:	2a 95       	dec	r18
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_Init+0x14a>
 2e2:	96 2f       	mov	r25, r22
 2e4:	90 95       	com	r25
 2e6:	93 23       	and	r25, r19
 2e8:	9b bb       	out	0x1b, r25	; 27
 2ea:	4d c0       	rjmp	.+154    	; 0x386 <DIO_Init+0x1f6>
			}
			break;
			
			case DIO_portB:
			if (ChannelsInit[count].ChannelLevel == std_high){
 2ec:	90 81       	ld	r25, Z
 2ee:	91 30       	cpi	r25, 0x01	; 1
 2f0:	59 f4       	brne	.+22     	; 0x308 <DIO_Init+0x178>
				set_bit(PORTB_Reg,BitNo);
 2f2:	98 b3       	in	r25, 0x18	; 24
 2f4:	ba 01       	movw	r22, r20
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_Init+0x16c>
 2f8:	66 0f       	add	r22, r22
 2fa:	77 1f       	adc	r23, r23
 2fc:	2a 95       	dec	r18
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_Init+0x168>
 300:	9b 01       	movw	r18, r22
 302:	29 2b       	or	r18, r25
 304:	28 bb       	out	0x18, r18	; 24
 306:	3f c0       	rjmp	.+126    	; 0x386 <DIO_Init+0x1f6>
			}
			else{
				clear_bit(PORTB_Reg,BitNo);
 308:	38 b3       	in	r19, 0x18	; 24
 30a:	ba 01       	movw	r22, r20
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_Init+0x182>
 30e:	66 0f       	add	r22, r22
 310:	77 1f       	adc	r23, r23
 312:	2a 95       	dec	r18
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_Init+0x17e>
 316:	96 2f       	mov	r25, r22
 318:	90 95       	com	r25
 31a:	93 23       	and	r25, r19
 31c:	98 bb       	out	0x18, r25	; 24
 31e:	33 c0       	rjmp	.+102    	; 0x386 <DIO_Init+0x1f6>
			}
			break;
			
			case DIO_portC:
			if (ChannelsInit[count].ChannelLevel == std_high){
 320:	90 81       	ld	r25, Z
 322:	91 30       	cpi	r25, 0x01	; 1
 324:	59 f4       	brne	.+22     	; 0x33c <DIO_Init+0x1ac>
				set_bit(PORTC_Reg,BitNo);
 326:	95 b3       	in	r25, 0x15	; 21
 328:	ba 01       	movw	r22, r20
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_Init+0x1a0>
 32c:	66 0f       	add	r22, r22
 32e:	77 1f       	adc	r23, r23
 330:	2a 95       	dec	r18
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_Init+0x19c>
 334:	9b 01       	movw	r18, r22
 336:	29 2b       	or	r18, r25
 338:	25 bb       	out	0x15, r18	; 21
 33a:	25 c0       	rjmp	.+74     	; 0x386 <DIO_Init+0x1f6>
			}
			else{
				clear_bit(PORTC_Reg,BitNo);
 33c:	35 b3       	in	r19, 0x15	; 21
 33e:	ba 01       	movw	r22, r20
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_Init+0x1b6>
 342:	66 0f       	add	r22, r22
 344:	77 1f       	adc	r23, r23
 346:	2a 95       	dec	r18
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_Init+0x1b2>
 34a:	96 2f       	mov	r25, r22
 34c:	90 95       	com	r25
 34e:	93 23       	and	r25, r19
 350:	95 bb       	out	0x15, r25	; 21
 352:	19 c0       	rjmp	.+50     	; 0x386 <DIO_Init+0x1f6>
			}
			break;
			
			case DIO_portD:
			if (ChannelsInit[count].ChannelLevel == std_high){
 354:	90 81       	ld	r25, Z
 356:	91 30       	cpi	r25, 0x01	; 1
 358:	59 f4       	brne	.+22     	; 0x370 <DIO_Init+0x1e0>
				set_bit(PORTD_Reg,BitNo);
 35a:	92 b3       	in	r25, 0x12	; 18
 35c:	ba 01       	movw	r22, r20
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_Init+0x1d4>
 360:	66 0f       	add	r22, r22
 362:	77 1f       	adc	r23, r23
 364:	2a 95       	dec	r18
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_Init+0x1d0>
 368:	9b 01       	movw	r18, r22
 36a:	29 2b       	or	r18, r25
 36c:	22 bb       	out	0x12, r18	; 18
 36e:	0b c0       	rjmp	.+22     	; 0x386 <DIO_Init+0x1f6>
			}
			else{
				clear_bit(PORTD_Reg,BitNo);
 370:	32 b3       	in	r19, 0x12	; 18
 372:	ba 01       	movw	r22, r20
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_Init+0x1ea>
 376:	66 0f       	add	r22, r22
 378:	77 1f       	adc	r23, r23
 37a:	2a 95       	dec	r18
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_Init+0x1e6>
 37e:	96 2f       	mov	r25, r22
 380:	90 95       	com	r25
 382:	93 23       	and	r25, r19
 384:	92 bb       	out	0x12, r25	; 18
		}
		
	}
	
	//PORT_Reg initialization
	for(count=DIO_channelA0; count<PIN_Num;count++){
 386:	8f 5f       	subi	r24, 0xFF	; 255
 388:	32 96       	adiw	r30, 0x02	; 2
 38a:	80 32       	cpi	r24, 0x20	; 32
 38c:	09 f0       	breq	.+2      	; 0x390 <DIO_Init+0x200>
 38e:	85 cf       	rjmp	.-246    	; 0x29a <DIO_Init+0x10a>
		}
		
	}
	
	
}
 390:	08 95       	ret

00000392 <LCD_CMD>:
		case DIO_portC:
		PORTC_Reg=data;
		break;
		
		case DIO_portD:
		PORTD_Reg=data;
 392:	cf 93       	push	r28
 394:	c8 2f       	mov	r28, r24
 396:	8b b3       	in	r24, 0x1b	; 27
 398:	8f 70       	andi	r24, 0x0F	; 15
 39a:	9c 2f       	mov	r25, r28
 39c:	90 7f       	andi	r25, 0xF0	; 240
 39e:	89 2b       	or	r24, r25
 3a0:	8b bb       	out	0x1b, r24	; 27
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	89 e0       	ldi	r24, 0x09	; 9
 3a6:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_write>
 3aa:	61 e0       	ldi	r22, 0x01	; 1
 3ac:	8b e0       	ldi	r24, 0x0B	; 11
 3ae:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_write>
 3b2:	87 ec       	ldi	r24, 0xC7	; 199
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <LCD_CMD+0x24>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <LCD_CMD+0x2a>
 3bc:	00 00       	nop
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	8b e0       	ldi	r24, 0x0B	; 11
 3c2:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_write>
 3c6:	8f e1       	ldi	r24, 0x1F	; 31
 3c8:	9e e4       	ldi	r25, 0x4E	; 78
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <LCD_CMD+0x38>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <LCD_CMD+0x3e>
 3d0:	00 00       	nop
 3d2:	8b b3       	in	r24, 0x1b	; 27
 3d4:	28 2f       	mov	r18, r24
 3d6:	2f 70       	andi	r18, 0x0F	; 15
 3d8:	30 e1       	ldi	r19, 0x10	; 16
 3da:	c3 9f       	mul	r28, r19
 3dc:	c0 01       	movw	r24, r0
 3de:	11 24       	eor	r1, r1
 3e0:	82 2b       	or	r24, r18
 3e2:	8b bb       	out	0x1b, r24	; 27
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	89 e0       	ldi	r24, 0x09	; 9
 3e8:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_write>
 3ec:	61 e0       	ldi	r22, 0x01	; 1
 3ee:	8b e0       	ldi	r24, 0x0B	; 11
 3f0:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_write>
 3f4:	8f e3       	ldi	r24, 0x3F	; 63
 3f6:	9f e1       	ldi	r25, 0x1F	; 31
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <LCD_CMD+0x66>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <LCD_CMD+0x6c>
 3fe:	00 00       	nop
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	8b e0       	ldi	r24, 0x0B	; 11
 404:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_write>
 408:	8f e3       	ldi	r24, 0x3F	; 63
 40a:	9f e1       	ldi	r25, 0x1F	; 31
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 412:	00 00       	nop
 414:	cf 91       	pop	r28
 416:	08 95       	ret

00000418 <LCD_init>:
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	8a e0       	ldi	r24, 0x0A	; 10
 41c:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_write>
 420:	2f ef       	ldi	r18, 0xFF	; 255
 422:	89 ef       	ldi	r24, 0xF9	; 249
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	21 50       	subi	r18, 0x01	; 1
 428:	80 40       	sbci	r24, 0x00	; 0
 42a:	90 40       	sbci	r25, 0x00	; 0
 42c:	e1 f7       	brne	.-8      	; 0x426 <LCD_init+0xe>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <LCD_init+0x18>
 430:	00 00       	nop
 432:	83 e3       	ldi	r24, 0x33	; 51
 434:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_CMD>
 438:	8f e3       	ldi	r24, 0x3F	; 63
 43a:	9f e1       	ldi	r25, 0x1F	; 31
 43c:	01 97       	sbiw	r24, 0x01	; 1
 43e:	f1 f7       	brne	.-4      	; 0x43c <LCD_init+0x24>
 440:	00 c0       	rjmp	.+0      	; 0x442 <LCD_init+0x2a>
 442:	00 00       	nop
 444:	82 e3       	ldi	r24, 0x32	; 50
 446:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_CMD>
 44a:	88 e2       	ldi	r24, 0x28	; 40
 44c:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_CMD>
 450:	86 e0       	ldi	r24, 0x06	; 6
 452:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_CMD>
 456:	8c e0       	ldi	r24, 0x0C	; 12
 458:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_CMD>
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_CMD>
 462:	8f e3       	ldi	r24, 0x3F	; 63
 464:	9f e1       	ldi	r25, 0x1F	; 31
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <LCD_init+0x4e>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <LCD_init+0x54>
 46c:	00 00       	nop
 46e:	08 95       	ret

00000470 <LCD_char>:
 470:	cf 93       	push	r28
 472:	c8 2f       	mov	r28, r24
 474:	8b b3       	in	r24, 0x1b	; 27
 476:	8f 70       	andi	r24, 0x0F	; 15
 478:	9c 2f       	mov	r25, r28
 47a:	90 7f       	andi	r25, 0xF0	; 240
 47c:	89 2b       	or	r24, r25
 47e:	8b bb       	out	0x1b, r24	; 27
 480:	61 e0       	ldi	r22, 0x01	; 1
 482:	89 e0       	ldi	r24, 0x09	; 9
 484:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_write>
 488:	61 e0       	ldi	r22, 0x01	; 1
 48a:	8b e0       	ldi	r24, 0x0B	; 11
 48c:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_write>
 490:	87 ec       	ldi	r24, 0xC7	; 199
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	01 97       	sbiw	r24, 0x01	; 1
 496:	f1 f7       	brne	.-4      	; 0x494 <LCD_char+0x24>
 498:	00 c0       	rjmp	.+0      	; 0x49a <LCD_char+0x2a>
 49a:	00 00       	nop
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	8b e0       	ldi	r24, 0x0B	; 11
 4a0:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_write>
 4a4:	8f e3       	ldi	r24, 0x3F	; 63
 4a6:	9f e1       	ldi	r25, 0x1F	; 31
 4a8:	01 97       	sbiw	r24, 0x01	; 1
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <LCD_char+0x38>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <LCD_char+0x3e>
 4ae:	00 00       	nop
 4b0:	8b b3       	in	r24, 0x1b	; 27
 4b2:	28 2f       	mov	r18, r24
 4b4:	2f 70       	andi	r18, 0x0F	; 15
 4b6:	30 e1       	ldi	r19, 0x10	; 16
 4b8:	c3 9f       	mul	r28, r19
 4ba:	c0 01       	movw	r24, r0
 4bc:	11 24       	eor	r1, r1
 4be:	82 2b       	or	r24, r18
 4c0:	8b bb       	out	0x1b, r24	; 27
 4c2:	61 e0       	ldi	r22, 0x01	; 1
 4c4:	89 e0       	ldi	r24, 0x09	; 9
 4c6:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_write>
 4ca:	61 e0       	ldi	r22, 0x01	; 1
 4cc:	8b e0       	ldi	r24, 0x0B	; 11
 4ce:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_write>
 4d2:	87 ec       	ldi	r24, 0xC7	; 199
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	01 97       	sbiw	r24, 0x01	; 1
 4d8:	f1 f7       	brne	.-4      	; 0x4d6 <LCD_char+0x66>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <LCD_char+0x6c>
 4dc:	00 00       	nop
 4de:	60 e0       	ldi	r22, 0x00	; 0
 4e0:	8b e0       	ldi	r24, 0x0B	; 11
 4e2:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_write>
 4e6:	8f e3       	ldi	r24, 0x3F	; 63
 4e8:	9f e1       	ldi	r25, 0x1F	; 31
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <LCD_char+0x7a>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <LCD_char+0x80>
 4f0:	00 00       	nop
 4f2:	cf 91       	pop	r28
 4f4:	08 95       	ret

000004f6 <LCD_String>:
		break;
		
	}
}
void LCD_String(char * string) {
 4f6:	0f 93       	push	r16
 4f8:	1f 93       	push	r17
 4fa:	cf 93       	push	r28
 4fc:	fc 01       	movw	r30, r24
	uint8 count=0;
	while(string[count] != '\0'){
 4fe:	80 81       	ld	r24, Z
 500:	88 23       	and	r24, r24
 502:	59 f0       	breq	.+22     	; 0x51a <LCD_String+0x24>
 504:	8f 01       	movw	r16, r30
 506:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_char(string[count]);
 508:	0e 94 38 02 	call	0x470	; 0x470 <LCD_char>
		count++;
 50c:	cf 5f       	subi	r28, 0xFF	; 255
		
	}
}
void LCD_String(char * string) {
	uint8 count=0;
	while(string[count] != '\0'){
 50e:	f8 01       	movw	r30, r16
 510:	ec 0f       	add	r30, r28
 512:	f1 1d       	adc	r31, r1
 514:	80 81       	ld	r24, Z
 516:	81 11       	cpse	r24, r1
 518:	f7 cf       	rjmp	.-18     	; 0x508 <LCD_String+0x12>
		LCD_char(string[count]);
		count++;
	}
}
 51a:	cf 91       	pop	r28
 51c:	1f 91       	pop	r17
 51e:	0f 91       	pop	r16
 520:	08 95       	ret

00000522 <LCD_startpos>:
void LCD_startpos(uint8 line, uint8 position){
	uint8 SendCmd;
	switch(line){
 522:	81 30       	cpi	r24, 0x01	; 1
 524:	19 f0       	breq	.+6      	; 0x52c <LCD_startpos+0xa>
 526:	82 30       	cpi	r24, 0x02	; 2
 528:	39 f0       	breq	.+14     	; 0x538 <LCD_startpos+0x16>
 52a:	08 95       	ret
		case 1:
		SendCmd=0x80 | (position & 0x0F);
		LCD_CMD(SendCmd);
 52c:	86 2f       	mov	r24, r22
 52e:	8f 70       	andi	r24, 0x0F	; 15
 530:	80 68       	ori	r24, 0x80	; 128
 532:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_CMD>
		break;
 536:	08 95       	ret
		case 2:
		SendCmd=0x0C | (position & 0x0F);
		LCD_CMD(SendCmd);
 538:	86 2f       	mov	r24, r22
 53a:	83 70       	andi	r24, 0x03	; 3
 53c:	8c 60       	ori	r24, 0x0C	; 12
 53e:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_CMD>
 542:	08 95       	ret

00000544 <main>:

int main(void) {
	char buffer[0];
	uint8 order ;
	//LCD initiating
	DIO_Init();
 544:	0e 94 c8 00 	call	0x190	; 0x190 <DIO_Init>
	LCD_init();
 548:	0e 94 0c 02 	call	0x418	; 0x418 <LCD_init>
	LCD_char(' ');
 54c:	80 e2       	ldi	r24, 0x20	; 32
 54e:	0e 94 38 02 	call	0x470	; 0x470 <LCD_char>
	//______________________________________________-
	
	//LM35 initiating
	
	DIO_Init();
 552:	0e 94 c8 00 	call	0x190	; 0x190 <DIO_Init>
	ADC_init();
 556:	0e 94 41 00 	call	0x82	; 0x82 <ADC_init>
	unsigned short temp =0;
	//UATR initiating
	UART_init();
 55a:	0e 94 be 03 	call	0x77c	; 0x77c <UART_init>
	UARTSendString("welcome");	
 55e:	80 ea       	ldi	r24, 0xA0	; 160
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <UARTSendString>
	//_________________________-
	LCD_startpos(1,0);
 566:	60 e0       	ldi	r22, 0x00	; 0
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	0e 94 91 02 	call	0x522	; 0x522 <LCD_startpos>
	LCD_String("welcome Sir");
 56e:	88 ea       	ldi	r24, 0xA8	; 168
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCD_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 576:	2f ef       	ldi	r18, 0xFF	; 255
 578:	83 ed       	ldi	r24, 0xD3	; 211
 57a:	90 e3       	ldi	r25, 0x30	; 48
 57c:	21 50       	subi	r18, 0x01	; 1
 57e:	80 40       	sbci	r24, 0x00	; 0
 580:	90 40       	sbci	r25, 0x00	; 0
 582:	e1 f7       	brne	.-8      	; 0x57c <main+0x38>
 584:	00 c0       	rjmp	.+0      	; 0x586 <main+0x42>
 586:	00 00       	nop
	_delay_ms(1000);
	LCD_startpos(1,0);
 588:	60 e0       	ldi	r22, 0x00	; 0
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	0e 94 91 02 	call	0x522	; 0x522 <LCD_startpos>
	LCD_String("insert action");
 590:	84 eb       	ldi	r24, 0xB4	; 180
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCD_String>
 598:	2f ef       	ldi	r18, 0xFF	; 255
 59a:	83 ed       	ldi	r24, 0xD3	; 211
 59c:	90 e3       	ldi	r25, 0x30	; 48
 59e:	21 50       	subi	r18, 0x01	; 1
 5a0:	80 40       	sbci	r24, 0x00	; 0
 5a2:	90 40       	sbci	r25, 0x00	; 0
 5a4:	e1 f7       	brne	.-8      	; 0x59e <main+0x5a>
 5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <main+0x64>
 5a8:	00 00       	nop
	_delay_ms(1000);
	LCD_startpos(1,0);
 5aa:	60 e0       	ldi	r22, 0x00	; 0
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	0e 94 91 02 	call	0x522	; 0x522 <LCD_startpos>
	LCD_String(" 1-lights on ");
 5b2:	82 ec       	ldi	r24, 0xC2	; 194
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCD_String>
 5ba:	2f ef       	ldi	r18, 0xFF	; 255
 5bc:	83 ed       	ldi	r24, 0xD3	; 211
 5be:	90 e3       	ldi	r25, 0x30	; 48
 5c0:	21 50       	subi	r18, 0x01	; 1
 5c2:	80 40       	sbci	r24, 0x00	; 0
 5c4:	90 40       	sbci	r25, 0x00	; 0
 5c6:	e1 f7       	brne	.-8      	; 0x5c0 <main+0x7c>
 5c8:	00 c0       	rjmp	.+0      	; 0x5ca <main+0x86>
 5ca:	00 00       	nop
	_delay_ms(1000);
	LCD_startpos(1,0);
 5cc:	60 e0       	ldi	r22, 0x00	; 0
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	0e 94 91 02 	call	0x522	; 0x522 <LCD_startpos>
	LCD_String(" 2-lights off ");
 5d4:	80 ed       	ldi	r24, 0xD0	; 208
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCD_String>
 5dc:	2f ef       	ldi	r18, 0xFF	; 255
 5de:	83 ed       	ldi	r24, 0xD3	; 211
 5e0:	90 e3       	ldi	r25, 0x30	; 48
 5e2:	21 50       	subi	r18, 0x01	; 1
 5e4:	80 40       	sbci	r24, 0x00	; 0
 5e6:	90 40       	sbci	r25, 0x00	; 0
 5e8:	e1 f7       	brne	.-8      	; 0x5e2 <main+0x9e>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <main+0xa8>
 5ec:	00 00       	nop
	_delay_ms(1000);
	LCD_startpos(1,0);
 5ee:	60 e0       	ldi	r22, 0x00	; 0
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	0e 94 91 02 	call	0x522	; 0x522 <LCD_startpos>
	LCD_String(" 3-doors open ");
 5f6:	8f ed       	ldi	r24, 0xDF	; 223
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCD_String>
 5fe:	2f ef       	ldi	r18, 0xFF	; 255
 600:	83 ed       	ldi	r24, 0xD3	; 211
 602:	90 e3       	ldi	r25, 0x30	; 48
 604:	21 50       	subi	r18, 0x01	; 1
 606:	80 40       	sbci	r24, 0x00	; 0
 608:	90 40       	sbci	r25, 0x00	; 0
 60a:	e1 f7       	brne	.-8      	; 0x604 <main+0xc0>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <main+0xca>
 60e:	00 00       	nop
	_delay_ms(1000);
	LCD_startpos(1,0);
 610:	60 e0       	ldi	r22, 0x00	; 0
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	0e 94 91 02 	call	0x522	; 0x522 <LCD_startpos>
	LCD_String(" 4-doors off ");
 618:	8e ee       	ldi	r24, 0xEE	; 238
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCD_String>
 620:	2f ef       	ldi	r18, 0xFF	; 255
 622:	83 ed       	ldi	r24, 0xD3	; 211
 624:	90 e3       	ldi	r25, 0x30	; 48
 626:	21 50       	subi	r18, 0x01	; 1
 628:	80 40       	sbci	r24, 0x00	; 0
 62a:	90 40       	sbci	r25, 0x00	; 0
 62c:	e1 f7       	brne	.-8      	; 0x626 <main+0xe2>
 62e:	00 c0       	rjmp	.+0      	; 0x630 <main+0xec>
 630:	00 00       	nop
	_delay_ms(1000);
	LCD_startpos(1,0);
 632:	60 e0       	ldi	r22, 0x00	; 0
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	0e 94 91 02 	call	0x522	; 0x522 <LCD_startpos>
	LCD_String(" 5-temprature ");
 63a:	8c ef       	ldi	r24, 0xFC	; 252
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCD_String>
	
		SPI_init('M');
 642:	8d e4       	ldi	r24, 0x4D	; 77
 644:	0e 94 a7 03 	call	0x74e	; 0x74e <SPI_init>
		slave_EN();
 648:	c4 98       	cbi	0x18, 4	; 24
	
	//LM35 initiating
	
	DIO_Init();
	ADC_init();
	unsigned short temp =0;
 64a:	00 e0       	ldi	r16, 0x00	; 0
 64c:	10 e0       	ldi	r17, 0x00	; 0
		SPI_init('M');
		slave_EN();
		
	while(1){
	
			order= UART_recieve();
 64e:	0e 94 cc 03 	call	0x798	; 0x798 <UART_recieve>
 652:	c8 2f       	mov	r28, r24
			
			//___________________________________
			
			//turning lights on.........................
			if(order == '1'){
 654:	81 33       	cpi	r24, 0x31	; 49
 656:	71 f4       	brne	.+28     	; 0x674 <main+0x130>
				UARTSendString("wait"); 
 658:	8b e0       	ldi	r24, 0x0B	; 11
 65a:	91 e0       	ldi	r25, 0x01	; 1
 65c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <UARTSendString>
				if(SPI_TX_RX('1') == (0x55)){
 660:	81 e3       	ldi	r24, 0x31	; 49
 662:	0e 94 b9 03 	call	0x772	; 0x772 <SPI_TX_RX>
 666:	85 35       	cpi	r24, 0x55	; 85
 668:	29 f5       	brne	.+74     	; 0x6b4 <main+0x170>
					UARTSendString("Done"); 
 66a:	80 e1       	ldi	r24, 0x10	; 16
 66c:	91 e0       	ldi	r25, 0x01	; 1
 66e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <UARTSendString>
 672:	20 c0       	rjmp	.+64     	; 0x6b4 <main+0x170>
			
			

			
			//turning lights off.................................
			if(order == '2'){
 674:	82 33       	cpi	r24, 0x32	; 50
 676:	71 f4       	brne	.+28     	; 0x694 <main+0x150>
				UARTSendString("wait");
 678:	8b e0       	ldi	r24, 0x0B	; 11
 67a:	91 e0       	ldi	r25, 0x01	; 1
 67c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <UARTSendString>
				if(SPI_TX_RX('2') == 0x55){
 680:	82 e3       	ldi	r24, 0x32	; 50
 682:	0e 94 b9 03 	call	0x772	; 0x772 <SPI_TX_RX>
 686:	85 35       	cpi	r24, 0x55	; 85
 688:	11 f7       	brne	.-60     	; 0x64e <main+0x10a>
					UARTSendString("done");
 68a:	85 e1       	ldi	r24, 0x15	; 21
 68c:	91 e0       	ldi	r25, 0x01	; 1
 68e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <UARTSendString>
 692:	dd cf       	rjmp	.-70     	; 0x64e <main+0x10a>
			
			//__________________________________________________
			
			//opening doors.................................
			
			if(order == '3'){
 694:	83 33       	cpi	r24, 0x33	; 51
 696:	71 f4       	brne	.+28     	; 0x6b4 <main+0x170>
				UARTSendString("wait");
 698:	8b e0       	ldi	r24, 0x0B	; 11
 69a:	91 e0       	ldi	r25, 0x01	; 1
 69c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <UARTSendString>
				if(SPI_TX_RX('3') == 0x55){
 6a0:	83 e3       	ldi	r24, 0x33	; 51
 6a2:	0e 94 b9 03 	call	0x772	; 0x772 <SPI_TX_RX>
 6a6:	85 35       	cpi	r24, 0x55	; 85
 6a8:	91 f6       	brne	.-92     	; 0x64e <main+0x10a>
					UARTSendString("done");
 6aa:	85 e1       	ldi	r24, 0x15	; 21
 6ac:	91 e0       	ldi	r25, 0x01	; 1
 6ae:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <UARTSendString>
 6b2:	cd cf       	rjmp	.-102    	; 0x64e <main+0x10a>
			//.............................................
			
			//____________________________________________
			
			//closing doors...............................
			if(order == '4'){
 6b4:	c4 33       	cpi	r28, 0x34	; 52
 6b6:	71 f4       	brne	.+28     	; 0x6d4 <main+0x190>
				UARTSendString("wait");
 6b8:	8b e0       	ldi	r24, 0x0B	; 11
 6ba:	91 e0       	ldi	r25, 0x01	; 1
 6bc:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <UARTSendString>
				if(SPI_TX_RX('4') == 0x55){
 6c0:	84 e3       	ldi	r24, 0x34	; 52
 6c2:	0e 94 b9 03 	call	0x772	; 0x772 <SPI_TX_RX>
 6c6:	85 35       	cpi	r24, 0x55	; 85
 6c8:	11 f6       	brne	.-124    	; 0x64e <main+0x10a>
					UARTSendString("done");
 6ca:	85 e1       	ldi	r24, 0x15	; 21
 6cc:	91 e0       	ldi	r25, 0x01	; 1
 6ce:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <UARTSendString>
 6d2:	bd cf       	rjmp	.-134    	; 0x64e <main+0x10a>
			//............................................
			
			//____________________________________________
			
						 //temprature......................................
						 else if(order == '5' ){
 6d4:	c5 33       	cpi	r28, 0x35	; 53
 6d6:	09 f0       	breq	.+2      	; 0x6da <main+0x196>
 6d8:	ba cf       	rjmp	.-140    	; 0x64e <main+0x10a>
							UARTSendString("wait");
 6da:	8b e0       	ldi	r24, 0x0B	; 11
 6dc:	91 e0       	ldi	r25, 0x01	; 1
 6de:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <UARTSendString>
	
							 if(SPI_TX_RX('5') == (0x55)){
 6e2:	85 e3       	ldi	r24, 0x35	; 53
 6e4:	0e 94 b9 03 	call	0x772	; 0x772 <SPI_TX_RX>
 6e8:	85 35       	cpi	r24, 0x55	; 85
 6ea:	71 f4       	brne	.+28     	; 0x708 <main+0x1c4>
 6ec:	2f ef       	ldi	r18, 0xFF	; 255
 6ee:	87 e8       	ldi	r24, 0x87	; 135
 6f0:	93 e1       	ldi	r25, 0x13	; 19
 6f2:	21 50       	subi	r18, 0x01	; 1
 6f4:	80 40       	sbci	r24, 0x00	; 0
 6f6:	90 40       	sbci	r25, 0x00	; 0
 6f8:	e1 f7       	brne	.-8      	; 0x6f2 <main+0x1ae>
 6fa:	00 c0       	rjmp	.+0      	; 0x6fc <main+0x1b8>
 6fc:	00 00       	nop
								  
								 _delay_ms(400);
								 temp = SPI_TX_RX('5');
 6fe:	85 e3       	ldi	r24, 0x35	; 53
 700:	0e 94 b9 03 	call	0x772	; 0x772 <SPI_TX_RX>
 704:	08 2f       	mov	r16, r24
 706:	10 e0       	ldi	r17, 0x00	; 0
								 if(temp==27){
									
								 }
								 
							 }
							 LCD_startpos(1,0);
 708:	60 e0       	ldi	r22, 0x00	; 0
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	0e 94 91 02 	call	0x522	; 0x522 <LCD_startpos>
							 LCD_String("temperature: ");
 710:	8a e1       	ldi	r24, 0x1A	; 26
 712:	91 e0       	ldi	r25, 0x01	; 1
 714:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCD_String>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 718:	4a e0       	ldi	r20, 0x0A	; 10
 71a:	6d b7       	in	r22, 0x3d	; 61
 71c:	7e b7       	in	r23, 0x3e	; 62
 71e:	6f 5f       	subi	r22, 0xFF	; 255
 720:	7f 4f       	sbci	r23, 0xFF	; 255
 722:	c8 01       	movw	r24, r16
 724:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__itoa_ncheck>
							 itoa(temp,buffer,10);
							 LCD_String(buffer);
 728:	8d b7       	in	r24, 0x3d	; 61
 72a:	9e b7       	in	r25, 0x3e	; 62
 72c:	01 96       	adiw	r24, 0x01	; 1
 72e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCD_String>
 732:	2f ef       	ldi	r18, 0xFF	; 255
 734:	83 ed       	ldi	r24, 0xD3	; 211
 736:	90 e3       	ldi	r25, 0x30	; 48
 738:	21 50       	subi	r18, 0x01	; 1
 73a:	80 40       	sbci	r24, 0x00	; 0
 73c:	90 40       	sbci	r25, 0x00	; 0
 73e:	e1 f7       	brne	.-8      	; 0x738 <main+0x1f4>
 740:	00 c0       	rjmp	.+0      	; 0x742 <main+0x1fe>
 742:	00 00       	nop
							 _delay_ms(1000);
							//LCD_CMD(0x01);
							 UARTSendString("done");
 744:	85 e1       	ldi	r24, 0x15	; 21
 746:	91 e0       	ldi	r25, 0x01	; 1
 748:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <UARTSendString>
 74c:	80 cf       	rjmp	.-256    	; 0x64e <main+0x10a>

0000074e <SPI_init>:
 *  Author: Khaled
 */ 
#include "SPI.h"
#include "Bit_math.h"
void SPI_init(unsigned char status){
	switch(status){
 74e:	8d 34       	cpi	r24, 0x4D	; 77
 750:	19 f0       	breq	.+6      	; 0x758 <SPI_init+0xa>
 752:	83 35       	cpi	r24, 0x53	; 83
 754:	51 f0       	breq	.+20     	; 0x76a <SPI_init+0x1c>
 756:	08 95       	ret
		case'M' :
		SPIDDR |= (1<<MOSI) | (1<<SS) | (1<<SCK);
 758:	87 b3       	in	r24, 0x17	; 23
 75a:	80 6b       	ori	r24, 0xB0	; 176
 75c:	87 bb       	out	0x17, r24	; 23
		SPIDDR &=~ (1<<MISO);
 75e:	be 98       	cbi	0x17, 6	; 23
		SPCR |= (1<<MSTR)| (1<<SPE);
 760:	8d b1       	in	r24, 0x0d	; 13
 762:	80 65       	ori	r24, 0x50	; 80
 764:	8d b9       	out	0x0d, r24	; 13
		slave_DIS();
 766:	c4 9a       	sbi	0x18, 4	; 24
		
		
		break;
 768:	08 95       	ret
		
		
		case'S':
		SPIDDR &=~ (1<<MOSI) | (1<<SS) | (1<<SCK);
 76a:	bd 98       	cbi	0x17, 5	; 23
		SPIDDR |= (1<<MISO);
 76c:	be 9a       	sbi	0x17, 6	; 23
		SPCR |= (1<<SPE);
 76e:	6e 9a       	sbi	0x0d, 6	; 13
 770:	08 95       	ret

00000772 <SPI_TX_RX>:
	//SPCR |= (1<<SPE);
	
}

unsigned char SPI_TX_RX(unsigned char data){
	SPDR =data;
 772:	8f b9       	out	0x0f, r24	; 15
	
	while (!get_bit(SPSR,SPIF));
 774:	77 9b       	sbis	0x0e, 7	; 14
 776:	fe cf       	rjmp	.-4      	; 0x774 <SPI_TX_RX+0x2>
	return SPDR;
 778:	8f b1       	in	r24, 0x0f	; 15
	
 77a:	08 95       	ret

0000077c <UART_init>:
 *  Author: Khaled
 */ 
#include "UART.h"

void UART_init(){
	UCSRB |= (1<<TXEN) | (1<<RXEN); // EN  TX&RX
 77c:	8a b1       	in	r24, 0x0a	; 10
 77e:	88 61       	ori	r24, 0x18	; 24
 780:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1<<URSEL) | (1<<UCSZ0) | (UCSZ1); // 8BIT -0 PAR - 1 STOP 
 782:	80 b5       	in	r24, 0x20	; 32
 784:	82 68       	ori	r24, 0x82	; 130
 786:	80 bd       	out	0x20, r24	; 32
	UBRRL = MyUBRR; //LOW 8BIT
 788:	87 e6       	ldi	r24, 0x67	; 103
 78a:	89 b9       	out	0x09, r24	; 9
	UBRRH =MyUBRR >>8;
 78c:	10 bc       	out	0x20, r1	; 32
 78e:	08 95       	ret

00000790 <UART_send>:
	
}

void UART_send(unsigned char data){
	while (!(UCSRA & (1<<UDRE)));
 790:	5d 9b       	sbis	0x0b, 5	; 11
 792:	fe cf       	rjmp	.-4      	; 0x790 <UART_send>
	UDR = data;
 794:	8c b9       	out	0x0c, r24	; 12
 796:	08 95       	ret

00000798 <UART_recieve>:
}
unsigned char UART_recieve(){
	while (!(UCSRA & (1<<RXC)));
 798:	5f 9b       	sbis	0x0b, 7	; 11
 79a:	fe cf       	rjmp	.-4      	; 0x798 <UART_recieve>
	return UDR;
 79c:	8c b1       	in	r24, 0x0c	; 12
}
 79e:	08 95       	ret

000007a0 <UARTSendString>:
void UARTSendString(char *string){
 7a0:	0f 93       	push	r16
 7a2:	1f 93       	push	r17
 7a4:	cf 93       	push	r28
 7a6:	fc 01       	movw	r30, r24
	unsigned char i=0;
	while(string[i] != '\0'){
 7a8:	80 81       	ld	r24, Z
 7aa:	88 23       	and	r24, r24
 7ac:	59 f0       	breq	.+22     	; 0x7c4 <UARTSendString+0x24>
 7ae:	8f 01       	movw	r16, r30
 7b0:	c0 e0       	ldi	r28, 0x00	; 0
		UART_send(string[i]);
 7b2:	0e 94 c8 03 	call	0x790	; 0x790 <UART_send>
		i++;
 7b6:	cf 5f       	subi	r28, 0xFF	; 255
	while (!(UCSRA & (1<<RXC)));
	return UDR;
}
void UARTSendString(char *string){
	unsigned char i=0;
	while(string[i] != '\0'){
 7b8:	f8 01       	movw	r30, r16
 7ba:	ec 0f       	add	r30, r28
 7bc:	f1 1d       	adc	r31, r1
 7be:	80 81       	ld	r24, Z
 7c0:	81 11       	cpse	r24, r1
 7c2:	f7 cf       	rjmp	.-18     	; 0x7b2 <UARTSendString+0x12>
		UART_send(string[i]);
		i++;
	}
 7c4:	cf 91       	pop	r28
 7c6:	1f 91       	pop	r17
 7c8:	0f 91       	pop	r16
 7ca:	08 95       	ret

000007cc <__itoa_ncheck>:
 7cc:	bb 27       	eor	r27, r27
 7ce:	4a 30       	cpi	r20, 0x0A	; 10
 7d0:	31 f4       	brne	.+12     	; 0x7de <__itoa_ncheck+0x12>
 7d2:	99 23       	and	r25, r25
 7d4:	22 f4       	brpl	.+8      	; 0x7de <__itoa_ncheck+0x12>
 7d6:	bd e2       	ldi	r27, 0x2D	; 45
 7d8:	90 95       	com	r25
 7da:	81 95       	neg	r24
 7dc:	9f 4f       	sbci	r25, 0xFF	; 255
 7de:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <__utoa_common>

000007e2 <__utoa_ncheck>:
 7e2:	bb 27       	eor	r27, r27

000007e4 <__utoa_common>:
 7e4:	fb 01       	movw	r30, r22
 7e6:	55 27       	eor	r21, r21
 7e8:	aa 27       	eor	r26, r26
 7ea:	88 0f       	add	r24, r24
 7ec:	99 1f       	adc	r25, r25
 7ee:	aa 1f       	adc	r26, r26
 7f0:	a4 17       	cp	r26, r20
 7f2:	10 f0       	brcs	.+4      	; 0x7f8 <__utoa_common+0x14>
 7f4:	a4 1b       	sub	r26, r20
 7f6:	83 95       	inc	r24
 7f8:	50 51       	subi	r21, 0x10	; 16
 7fa:	b9 f7       	brne	.-18     	; 0x7ea <__utoa_common+0x6>
 7fc:	a0 5d       	subi	r26, 0xD0	; 208
 7fe:	aa 33       	cpi	r26, 0x3A	; 58
 800:	08 f0       	brcs	.+2      	; 0x804 <__utoa_common+0x20>
 802:	a9 5d       	subi	r26, 0xD9	; 217
 804:	a1 93       	st	Z+, r26
 806:	00 97       	sbiw	r24, 0x00	; 0
 808:	79 f7       	brne	.-34     	; 0x7e8 <__utoa_common+0x4>
 80a:	b1 11       	cpse	r27, r1
 80c:	b1 93       	st	Z+, r27
 80e:	11 92       	st	Z+, r1
 810:	cb 01       	movw	r24, r22
 812:	0c 94 0b 04 	jmp	0x816	; 0x816 <strrev>

00000816 <strrev>:
 816:	dc 01       	movw	r26, r24
 818:	fc 01       	movw	r30, r24
 81a:	67 2f       	mov	r22, r23
 81c:	71 91       	ld	r23, Z+
 81e:	77 23       	and	r23, r23
 820:	e1 f7       	brne	.-8      	; 0x81a <strrev+0x4>
 822:	32 97       	sbiw	r30, 0x02	; 2
 824:	04 c0       	rjmp	.+8      	; 0x82e <strrev+0x18>
 826:	7c 91       	ld	r23, X
 828:	6d 93       	st	X+, r22
 82a:	70 83       	st	Z, r23
 82c:	62 91       	ld	r22, -Z
 82e:	ae 17       	cp	r26, r30
 830:	bf 07       	cpc	r27, r31
 832:	c8 f3       	brcs	.-14     	; 0x826 <strrev+0x10>
 834:	08 95       	ret

00000836 <_exit>:
 836:	f8 94       	cli

00000838 <__stop_program>:
 838:	ff cf       	rjmp	.-2      	; 0x838 <__stop_program>
